2019-04-12)

2. 연산자(산술연산자/논리연산자/문자연산자)

1) 산술연산자
    - 산술연산식은 COLUMN명, 상수값, 산술연산자로 구성
    - 산술연산자는 +, -, *, /, () 로 구성 => ()는 우선순위 결정하기위해서 사용.
    
    EX) 단항연산식 : !, ++, ~(틸드), ?, 
    
    (사용형식)
        SELECT 산술연산식 FROM 테이블명
        
예) MEMBER 테이블에서 회원 마일리지를 10으로 나눈 값을 검색하시오.

SELECT  MEM_MILEAGE AS "마일리지",
        MEM_MILEAGE/10 AS "마일리지/10"
    FROM MEMBER;

예) 모든 회원의 마일리지를 10% 추가 지급하려한다.
    회원번호, 회원명, 현 마일리지, 변경마일리지를 검색하시오.
    
    SELECT * FROM MEMBER;
    
    SELECT  MEM_ID AS "회원번호",
            MEM_NAME AS "회원이름",
            MEM_MILEAGE AS "현 마일리지",
            MEM_MILEAGE*10 AS "마일리지*10"
        FROM MEMBER;
    
예) 회원테이블의 생년월일을 이용하여 회원들의 나이를 검색하시오.
    단, Alias는 회원 이름, 출생일, 나이
    
    SELECT * FROM MEMBER;
    SELECT MEM_BIR FROM MEMBER;
    
    SELECT  MEM_NAME AS "회원이름", -- EXTRACT를 이용해서 YEAR, MONTH, DAY 등을 뽑을 수 있음.
            EXTRACT(YEAR FROM MEM_BIR) AS 출생년도,
            EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM MEM_BIR) + 1 AS 나이
        FROM MEMBER;
        
예)  사원테이블(EMPLOYEES)에서 근무년수가 15년 이상인 사원들에 대하여
     보너스를 지급하려한다.
     보너스 = 급여 * (근속년수/50)이다.
     단, Alias는 사원번호, 사원명, 근속년수, 급여, 보너스이다.
     
    SELECT * FROM EMPLOYEES;
    
    SELECT EMPLOYEE_ID, EMP_NAME, HIRE_DATE, SALARY FROM EMPLOYEES;
    
    SELECT  EMPLOYEE_ID AS "사원번호",
            EMP_NAME AS "사원명",
            EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE) AS "근속년수",
            SALARY AS "급여",
           SALARY * (EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE)) / 50 AS "보너스"
        FROM EMPLOYEES
    WHERE   EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM HIRE_DATE) >= 15;
    
    -- 쌤버전 답변
    -- SELECT문 실행순서 : FROM -> WHERE -> SELECT 순으로 실행됨.
    SELECT  E.EMPLOYEE_ID AS 사원번호, --테이블명 하나일때는 안써줘도됨.
            E.EMP_NAME AS 사원명,
            EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM E.HIRE_DATE) AS 근속년수,
            E.SALARY AS 급여,
            E.SALARY * (EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM E.HIRE_DATE))/50 AS 보너스
            FROM EMPLOYEES E    -- EMPLOYEES를 별칭 E로 불러쓸 수 있음 -> SELECT절에서.
        WHERE  EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM E.HIRE_DATE) >= 15;
        
    SELECT * FROM DUAL;
    
    SELECT 56 * 129.5 FROM DUAL;
    SELECT EXTRACT(MONTH FROM SYSDATE) FROM DUAL;   -- 테이블이 없어도 임의로 쓰는것. 구색 갖추려고
    
2) 문자열 연산자(11)
    - '||' 앞, 뒤의 문자열을 결합한 하나의 문자열을 반환   -- java의 +연산자랑 같은 것 String형태 "유형"+"욱";
    예) 회원 테이블을 이용하여
        회원번호, 회원명, 주민번호를 검색하되 주민번호는 XXXXXX-XXXXXXX형식으로 출력하라
        -- MEM_REGNO1 MEM_REGNO2가 띄어쓰기로 나눠져있어서 그걸 || 으로 붙힌다. (문자열에서만 동작)
    
    SELECT * FROM MEMBER;
    
    SELECT  MEM_ID AS 회원번호,
            MEM_NAME AS 회원이름,
            MEM_REGNO1 || '-' || MEM_REGNO2 AS 주민번호 -- AS별칭이 7자리이상(?)이면 오류남.
        FROM MEMBER;
        
    예) 회원 테이블을 이용하여 주소지가 대전인 회원의 회원번호, 회원명, 주소를 
        검색하시오.
        
        SELECT * FROM MEMBER;
        
        SELECT  MEM_ID AS 회원번호,
                MEM_NAME AS 회원명,
                MEM_ADD1 || ' ' || MEM_ADD2 AS 주소
            FROM MEMBER
--        WHERE MEM_ADD1 LIKE '대전%'; -- 데이터 양이 많으면 느려지기 때문에 지양.

     SELECT  MEM_ID AS 회원번호,
                MEM_NAME AS 회원명,
                MEM_ADD1 || ' ' || MEM_ADD2 AS 주소
            FROM MEMBER
            --SUBSTR(원본데이터 컬럼명, 시작위치(1부터 카운팅!), 문자갯수) = '대전' => 결과가 대전과 같은놈만.;
        WHERE SUBSTR(MEM_ADD1, 1, 2) = '대전';    
        
        
